{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Create screenshot capture script",
        "description": "Task cancelled - screenshots will be captured manually instead of via automation",
        "status": "cancelled",
        "dependencies": [],
        "priority": "high",
        "details": "After evaluation, it was determined that automating screenshot capture for only 5 apps is not worth the development effort. Manual screenshot capture will be faster and more practical in this case.\n\nInstead of creating an automation script:\n1. Screenshots will be captured manually at 1200x800 resolution\n2. Each screenshot will be saved as PNG with filename format '[app-name]-main.png'\n3. Screenshots will be optimized to ensure file size is under 500KB\n4. This work will be handled as part of Task 3",
        "testStrategy": "This task has been cancelled. Screenshot quality verification will be performed as part of Task 3 instead.",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Create archived repo README template",
        "description": "Create a standardized README template for archived repositories based on the template at docs/templates/archived-repo-readme.md",
        "details": "Create a markdown template that will be used for all archived repositories. The template should include:\n\n1. A prominent notice at the top indicating the repository has moved to the monorepo\n2. Placeholder for the app screenshot\n3. Links section with placeholders for:\n   - Live demo URL\n   - Monorepo URL\n   - Source code URL within monorepo\n   - Documentation URL\n4. Brief description placeholder\n5. Development instructions pointing to the monorepo\n6. MIT license notice\n\nExample template structure:\n```markdown\n# [App Name] - MOVED TO MONOREPO\n\n> ⚠️ **REPOSITORY MOVED**: This project has been migrated to the [genart-monorepo](https://github.com/username/genart-monorepo).\n\n![Screenshot of [App Name]](screenshot.png)\n\n## Links\n- [Live Demo](https://username.github.io/[app-name]/) (still active)\n- [Source Code](https://github.com/username/genart-monorepo/tree/main/apps/[app-name])\n- [Documentation](https://github.com/username/genart-monorepo/tree/main/docs/[app-name])\n\n## About\n[Brief description of what the app does]\n\n## Development\nThis project is now developed as part of the genart-monorepo. Please refer to the [monorepo documentation](https://github.com/username/genart-monorepo) for development instructions.\n\n## License\nMIT\n```",
        "testStrategy": "1. Verify the template includes all required sections\n2. Check that placeholder syntax is consistent and easy to replace\n3. Validate markdown formatting renders correctly on GitHub\n4. Ensure the template follows best practices for GitHub markdown\n5. Confirm the template matches the requirements specified in the PRD",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Capture screenshots for all 5 apps",
        "description": "Use manual screenshot capture to generate high-quality screenshots for the remaining 3 apps and save them to the monorepo",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Capture screenshots for the remaining 3 apps (duo-chrome, those-shape-things, and computational-collage):\n\n1. Ensure all apps are properly deployed and accessible via GitHub Pages\n2. Manually capture screenshots at 1200x800 resolution\n3. Save the screenshots to `apps/[app-name]/docs/screenshots/[app-name]-main.png`\n4. Manually review each screenshot to ensure it shows a representative example of the app's output\n5. If any screenshots don't properly showcase the app's functionality, recapture them\n\nFor apps with randomized output, you may need to refresh multiple times or add interaction steps to get a good representative example.\n\nNote: Screenshots for dragline and crude-collage-painter have already been captured and saved.\n\nImplementation steps:\n```bash\n# Navigate to each app directory\ncd apps/[app-name]\n\n# Create screenshots directory if it doesn't exist\nmkdir -p docs/screenshots\n\n# Capture screenshot manually and save to the correct location\n# Ensure 1200x800 resolution\n\n# Verify screenshots were created\nls -la apps/*/docs/screenshots/\n```",
        "testStrategy": "1. Visually inspect each screenshot for quality and representation of app functionality\n2. Verify all 5 screenshots exist in the correct location (apps/[app-name]/docs/screenshots/[app-name]-main.png)\n3. Check that each screenshot has the correct dimensions (1200x800)\n4. Confirm all screenshots are in PNG format\n5. Validate that file sizes are under 500KB\n6. Ensure screenshots show meaningful content (not loading screens or errors)",
        "subtasks": [
          {
            "id": 1,
            "title": "Capture screenshot for duo-chrome",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Capture screenshot for those-shape-things",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Capture screenshot for computational-collage",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Verify dragline screenshot is correctly saved",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Verify crude-collage-painter screenshot is correctly saved",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Generate README for duo-chrome repository",
        "description": "Create and update the README.md for the duo-chrome repository using the archived repo template",
        "details": "Using the template created in Task 2, generate a README.md file for the duo-chrome repository:\n\n1. Copy the template and replace all placeholders with duo-chrome specific information\n2. Include a brief description of what duo-chrome does\n3. Update all links to point to the correct locations\n4. Reference the screenshot that will be added in a later task\n5. Ensure the README clearly indicates the repository has moved to the monorepo\n\nExample implementation:\n```markdown\n# Duo-Chrome - MOVED TO MONOREPO\n\n> ⚠️ **REPOSITORY MOVED**: This project has been migrated to the [genart-monorepo](https://github.com/username/genart-monorepo).\n\n![Screenshot of Duo-Chrome](screenshot.png)\n\n## Links\n- [Live Demo](https://username.github.io/duo-chrome/) (still active)\n- [Source Code](https://github.com/username/genart-monorepo/tree/main/apps/duo-chrome)\n- [Documentation](https://github.com/username/genart-monorepo/tree/main/docs/duo-chrome)\n\n## About\nDuo-Chrome is a generative art application that creates compositions using two-color palettes and geometric shapes.\n\n## Development\nThis project is now developed as part of the genart-monorepo. Please refer to the [monorepo documentation](https://github.com/username/genart-monorepo) for development instructions.\n\n## License\nMIT\n```",
        "testStrategy": "1. Verify all placeholders have been replaced with duo-chrome specific information\n2. Check that all links are correctly formatted and point to valid locations\n3. Confirm the README includes all required sections from the PRD\n4. Validate that the screenshot reference uses the correct path\n5. Ensure the migration notice is prominently displayed at the top",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Generate READMEs for remaining repositories",
        "description": "Create and update README.md files for the remaining 4 repositories using the archived repo template",
        "details": "Using the template created in Task 2, generate README.md files for the remaining 4 repositories:\n\n1. crude-collage-painter\n2. those-shape-things\n3. computational-collage\n4. dragline\n\nFor each repository:\n1. Copy the template and replace all placeholders with app-specific information\n2. Include a brief description of what each app does\n3. Update all links to point to the correct locations\n4. Reference the screenshot that will be added in a later task\n5. Ensure each README clearly indicates the repository has moved to the monorepo\n\nConsider creating a script to automate this process if the repositories follow a consistent pattern. Example script pseudo-code:\n\n```javascript\nconst fs = require('fs');\nconst template = fs.readFileSync('docs/templates/archived-repo-readme.md', 'utf8');\n\nconst apps = [\n  {\n    name: 'crude-collage-painter',\n    description: 'An interactive collage creation tool that allows users to paint with image fragments.'\n  },\n  // Add remaining apps with descriptions\n];\n\napps.forEach(app => {\n  let readme = template\n    .replace(/\\[App Name\\]/g, app.name)\n    .replace(/\\[app-name\\]/g, app.name.toLowerCase())\n    .replace(/\\[Brief description of what the app does\\]/g, app.description);\n  \n  fs.writeFileSync(`${app.name}-README.md`, readme);\n});\n```",
        "testStrategy": "1. Verify all placeholders have been replaced with app-specific information in each README\n2. Check that all links are correctly formatted and point to valid locations\n3. Confirm each README includes all required sections from the PRD\n4. Validate that the screenshot references use the correct paths\n5. Ensure the migration notices are prominently displayed at the top of each README\n6. Compare all READMEs to ensure consistency in formatting and structure",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Copy screenshots to duo-chrome repository",
        "description": "Copy the duo-chrome screenshot from the monorepo to the original duo-chrome repository",
        "details": "Copy the duo-chrome screenshot from the monorepo to the original repository:\n\n1. Locate the screenshot in the monorepo at `docs/screenshots/duo-chrome-main.png`\n2. Copy the file to the duo-chrome repository root directory\n3. Rename the file to `screenshot.png` in the destination repository\n4. Verify the screenshot is correctly referenced in the README.md\n\nImplementation steps:\n```bash\n# Assuming you have both repositories cloned locally\n# Copy the screenshot from monorepo to the original repo\ncp /path/to/genart-monorepo/docs/screenshots/duo-chrome-main.png /path/to/duo-chrome/screenshot.png\n\n# Verify the file was copied correctly\nls -la /path/to/duo-chrome/screenshot.png\n```",
        "testStrategy": "1. Verify the screenshot file exists in the duo-chrome repository\n2. Check that the file is named 'screenshot.png'\n3. Confirm the file is identical to the one in the monorepo\n4. Validate that the image displays correctly when referenced in the README\n5. Ensure the file size is under 500KB",
        "priority": "medium",
        "dependencies": [
          3,
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Copy screenshots to remaining repositories",
        "description": "Copy screenshots from the monorepo to the remaining 4 original repositories",
        "details": "Copy the screenshots from the monorepo to each of the original repositories:\n\n1. For each of the remaining 4 apps (crude-collage-painter, those-shape-things, computational-collage, dragline):\n   a. Locate the screenshot in the monorepo at `docs/screenshots/[app-name]-main.png`\n   b. Copy the file to the corresponding repository root directory\n   c. Rename the file to `screenshot.png` in the destination repository\n   d. Verify the screenshot is correctly referenced in the README.md\n\nConsider creating a script to automate this process:\n\n```javascript\nconst fs = require('fs');\nconst { execSync } = require('child_process');\n\nconst apps = [\n  'crude-collage-painter',\n  'those-shape-things',\n  'computational-collage',\n  'dragline'\n];\n\napps.forEach(app => {\n  const source = `../genart-monorepo/docs/screenshots/${app}-main.png`;\n  const destination = `../${app}/screenshot.png`;\n  \n  console.log(`Copying ${source} to ${destination}`);\n  fs.copyFileSync(source, destination);\n});\n```",
        "testStrategy": "1. Verify each screenshot file exists in its respective repository\n2. Check that each file is named 'screenshot.png'\n3. Confirm each file is identical to the one in the monorepo\n4. Validate that each image displays correctly when referenced in its README\n5. Ensure all file sizes are under 500KB\n6. Test that all 4 screenshots have been successfully copied",
        "priority": "medium",
        "dependencies": [
          3,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Commit changes to duo-chrome repository",
        "description": "Commit the updated README and screenshot to the duo-chrome repository",
        "details": "Commit the changes made to the duo-chrome repository:\n\n1. Navigate to the duo-chrome repository\n2. Stage the new README.md and screenshot.png files\n3. Commit the changes with a clear message indicating the repository has been migrated\n4. Push the changes to the main branch on GitHub\n\nImplementation steps:\n```bash\n# Navigate to the duo-chrome repository\ncd /path/to/duo-chrome\n\n# Stage the files\ngit add README.md screenshot.png\n\n# Commit the changes\ngit commit -m \"Update repository to indicate migration to genart-monorepo\"\n\n# Push to GitHub\ngit push origin main\n```",
        "testStrategy": "1. Verify the commit was successful\n2. Check that both README.md and screenshot.png were included in the commit\n3. Confirm the changes are visible on GitHub\n4. Validate that the README renders correctly on GitHub with the screenshot visible\n5. Ensure all links in the README are functional\n6. Verify the repository remains unarchived and accessible",
        "priority": "medium",
        "dependencies": [
          4,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Commit changes to remaining repositories",
        "description": "Commit the updated READMEs and screenshots to the remaining 4 repositories",
        "details": "Commit the changes made to each of the remaining 4 repositories:\n\n1. For each repository (crude-collage-painter, those-shape-things, computational-collage, dragline):\n   a. Navigate to the repository\n   b. Stage the new README.md and screenshot.png files\n   c. Commit the changes with a clear message indicating the repository has been migrated\n   d. Push the changes to the main branch on GitHub\n\nConsider creating a script to automate this process:\n\n```bash\n#!/bin/bash\n\nREPOS=(\"crude-collage-painter\" \"those-shape-things\" \"computational-collage\" \"dragline\")\nBASE_DIR=\"/path/to/repos\"\n\nfor repo in \"${REPOS[@]}\"\ndo\n  echo \"Processing $repo...\"\n  cd \"$BASE_DIR/$repo\"\n  git add README.md screenshot.png\n  git commit -m \"Update repository to indicate migration to genart-monorepo\"\n  git push origin main\ndone\n\necho \"All repositories updated successfully!\"\n```",
        "testStrategy": "1. Verify all commits were successful\n2. Check that both README.md and screenshot.png were included in each commit\n3. Confirm the changes are visible on GitHub for all repositories\n4. Validate that each README renders correctly on GitHub with the screenshot visible\n5. Ensure all links in each README are functional\n6. Verify all repositories remain unarchived and accessible",
        "priority": "medium",
        "dependencies": [
          5,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Verify all success criteria",
        "description": "Perform a final verification of all success criteria across all repositories and the monorepo",
        "details": "Conduct a comprehensive verification of all success criteria specified in the PRD:\n\n1. Verify all 5 apps have screenshots captured and saved in the monorepo at `docs/screenshots/[app-name]-main.png`\n2. Confirm all 5 original repos have updated READMEs on their main branches\n3. Check that all screenshots are copied to original repos as `screenshot.png`\n4. Test all links in archived READMEs to ensure they are functional:\n   - Live demo links\n   - Monorepo link\n   - Source code links\n   - Documentation links\n5. Verify READMEs follow consistent format using the template\n6. Ensure all repositories remain unarchived (not read-only)\n7. Confirm all screenshots are PNG format and under 500KB\n\nCreate a verification checklist and document the results:\n\n```markdown\n# Migration Verification Checklist\n\n## Monorepo Screenshots\n- [ ] duo-chrome-main.png exists and is high quality\n- [ ] crude-collage-painter-main.png exists and is high quality\n- [ ] those-shape-things-main.png exists and is high quality\n- [ ] computational-collage-main.png exists and is high quality\n- [ ] dragline-main.png exists and is high quality\n\n## Original Repo READMEs\n- [ ] duo-chrome README updated with migration notice\n- [ ] crude-collage-painter README updated with migration notice\n- [ ] those-shape-things README updated with migration notice\n- [ ] computational-collage README updated with migration notice\n- [ ] dragline README updated with migration notice\n\n## Original Repo Screenshots\n- [ ] duo-chrome screenshot.png exists\n- [ ] crude-collage-painter screenshot.png exists\n- [ ] those-shape-things screenshot.png exists\n- [ ] computational-collage screenshot.png exists\n- [ ] dragline screenshot.png exists\n\n## Link Verification\n- [ ] All live demo links work\n- [ ] All monorepo links work\n- [ ] All source code links work\n- [ ] All documentation links work\n\n## Repository Status\n- [ ] All repositories remain unarchived\n- [ ] All gh-pages deployments still work\n```",
        "testStrategy": "1. Use the verification checklist to systematically test all requirements\n2. Have a second team member perform an independent verification\n3. Test all links from both internal network and external network\n4. Verify screenshots display correctly on different devices and screen sizes\n5. Check GitHub Pages deployments for all 5 apps to ensure they still function\n6. Document any issues found and address them before considering the task complete",
        "priority": "high",
        "dependencies": [
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Add on-screen help/controls display for duo-chrome app",
        "description": "Create a toggleable overlay that displays keyboard controls and usage instructions for the duo-chrome app, similar to dragline's info box.",
        "details": "Implement an on-screen help display for the duo-chrome app that shows available keyboard controls and usage instructions:\n\n1. Create a new HTML element for the help overlay:\n   ```html\n   <div id=\"help-overlay\" class=\"help-overlay hidden\">\n     <div class=\"help-content\">\n       <h2>Duo-Chrome Controls</h2>\n       <ul>\n         <li><strong>Mouse Click</strong>: Generate new image</li>\n         <li><strong>B</strong>: Toggle background</li>\n         <li><strong>C</strong>: Toggle color cycling</li>\n         <li><strong>M</strong>: Cycle through blend modes</li>\n         <li><strong>P</strong>: Pause/resume animation</li>\n         <li><strong>S</strong>: Toggle auto-save</li>\n         <li><strong>Cmd+S</strong>: Manual save</li>\n         <li><strong>H/I</strong>: Toggle this help display</li>\n       </ul>\n     </div>\n   </div>\n   ```\n\n2. Add CSS styling for the help overlay:\n   ```css\n   .help-overlay {\n     position: absolute;\n     top: 0;\n     left: 0;\n     width: 100%;\n     height: 100%;\n     background-color: rgba(0, 0, 0, 0.7);\n     display: flex;\n     justify-content: center;\n     align-items: center;\n     z-index: 1000;\n   }\n   \n   .help-content {\n     background-color: rgba(255, 255, 255, 0.9);\n     padding: 20px;\n     border-radius: 8px;\n     max-width: 400px;\n     color: #333;\n   }\n   \n   .hidden {\n     display: none;\n   }\n   ```\n\n3. Implement JavaScript to toggle the help display:\n   ```javascript\n   // Add event listener for 'h' and 'i' keys to toggle help\n   document.addEventListener('keydown', function(event) {\n     if (event.key === 'h' || event.key === 'i') {\n       const helpOverlay = document.getElementById('help-overlay');\n       helpOverlay.classList.toggle('hidden');\n     }\n   });\n   ```\n\n4. Ensure the help overlay is initially hidden when the app loads.\n\n5. Test the implementation with all keyboard shortcuts to verify they work as expected.\n\n6. Make sure the help overlay is responsive and displays correctly on different screen sizes.\n\n7. Consider adding a small help icon (?) in a corner of the app that can also toggle the help display for users who may not know the keyboard shortcut.",
        "testStrategy": "1. Verify the help overlay is hidden by default when the app loads.\n\n2. Test toggling the help overlay by pressing the 'h' key and verify it appears and disappears correctly.\n\n3. Test toggling the help overlay by pressing the 'i' key and verify it works the same way.\n\n4. Verify all keyboard shortcuts listed in the help overlay are accurate and match the actual functionality:\n   - Click the mouse to generate a new image\n   - Press 'b' to toggle background\n   - Press 'c' to toggle color cycling\n   - Press 'm' to cycle through blend modes\n   - Press 'p' to pause/resume animation\n   - Press 'S' to toggle auto-save\n   - Press Cmd+S to manually save\n\n5. Test the overlay on different screen sizes (desktop, tablet, mobile) to ensure it's responsive and readable.\n\n6. Verify the overlay has appropriate contrast for readability.\n\n7. Check that the overlay doesn't interfere with the normal operation of the app when displayed.\n\n8. Verify the overlay can be dismissed by pressing 'h' or 'i' again.\n\n9. Test with different browsers (Chrome, Firefox, Safari) to ensure cross-browser compatibility.\n\n10. Verify the help text accurately describes all available controls and features.",
        "status": "pending",
        "dependencies": [
          8
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Add Save Functionality to those-shape-things App",
        "description": "Implement functionality to save the current composition as a PNG file with timestamp using keyboard shortcuts (Cmd+S or 's' key) in the those-shape-things app.",
        "details": "Implement save functionality for the those-shape-things app:\n\n1. Add event listeners for keyboard shortcuts:\n   ```javascript\n   function keyPressed() {\n     // Check for 's' key or Cmd+S (metaKey is Cmd on Mac)\n     if (key === 's' || (keyCode === 83 && metaKey)) {\n       saveComposition();\n       return false; // Prevent default browser save dialog\n     }\n   }\n   ```\n\n2. Create the save function that generates a timestamped filename and saves the canvas:\n   ```javascript\n   function saveComposition() {\n     // Generate timestamp in format YYYYMMDD-HHMMSS\n     let now = new Date();\n     let timestamp = now.getFullYear() +\n                    String(now.getMonth() + 1).padStart(2, '0') +\n                    String(now.getDate()).padStart(2, '0') + '-' +\n                    String(now.getHours()).padStart(2, '0') +\n                    String(now.getMinutes()).padStart(2, '0') +\n                    String(now.getSeconds()).padStart(2, '0');\n     \n     // Create filename with timestamp\n     let filename = 'those-shape-things-' + timestamp + '.png';\n     \n     // Use p5.js saveCanvas() function to save the current canvas as PNG\n     saveCanvas(canvas, filename, 'png');\n     \n     // Optional: Provide visual feedback that the image was saved\n     displaySaveNotification();\n   }\n   ```\n\n3. Add visual feedback for the user when an image is saved:\n   ```javascript\n   function displaySaveNotification() {\n     // Create a temporary notification element\n     let notification = document.createElement('div');\n     notification.className = 'save-notification';\n     notification.textContent = 'Composition saved!';\n     document.body.appendChild(notification);\n     \n     // Remove the notification after 2 seconds\n     setTimeout(() => {\n       notification.classList.add('fade-out');\n       setTimeout(() => {\n         document.body.removeChild(notification);\n       }, 500);\n     }, 2000);\n   }\n   ```\n\n4. Add CSS for the save notification:\n   ```css\n   .save-notification {\n     position: fixed;\n     bottom: 20px;\n     right: 20px;\n     background-color: rgba(0, 0, 0, 0.7);\n     color: white;\n     padding: 10px 20px;\n     border-radius: 4px;\n     z-index: 1000;\n     transition: opacity 0.5s;\n   }\n   \n   .fade-out {\n     opacity: 0;\n   }\n   ```\n\n5. Update the help overlay (if it exists) to include information about the new save functionality:\n   - Add an entry for 'S' or 'Cmd+S': Save current composition as PNG\n\n6. Ensure the canvas is properly initialized and accessible for the saveCanvas() function:\n   ```javascript\n   let canvas;\n   \n   function setup() {\n     canvas = createCanvas(800, 600);\n     // other setup code...\n   }\n   ```",
        "testStrategy": "1. Test the 's' key shortcut:\n   - Launch the those-shape-things app\n   - Create a composition\n   - Press the 's' key\n   - Verify a PNG file is downloaded with the correct timestamp format in the filename\n   - Confirm the saved image accurately represents the current canvas state\n\n2. Test the Cmd+S (or Ctrl+S on Windows) shortcut:\n   - Launch the those-shape-things app\n   - Create a composition\n   - Press Cmd+S (Mac) or Ctrl+S (Windows)\n   - Verify a PNG file is downloaded with the correct timestamp format\n   - Confirm the browser's default save dialog is prevented from appearing\n   - Verify the saved image matches the canvas content\n\n3. Test the save notification:\n   - Trigger a save using either shortcut\n   - Verify the save notification appears in the bottom right corner\n   - Confirm the notification disappears after approximately 2 seconds\n   - Check that the notification is visible against different background colors/compositions\n\n4. Test with different browsers:\n   - Verify the save functionality works in Chrome, Firefox, Safari, and Edge\n   - Ensure the file downloads correctly in each browser\n\n5. Test with different compositions:\n   - Save compositions of varying complexity\n   - Verify all elements are correctly captured in the saved PNG\n   - Check that transparency is handled correctly if applicable\n\n6. If help overlay exists, verify it includes the new save shortcut information",
        "status": "pending",
        "dependencies": [
          7,
          9
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Fix Black Background Toggle in those-shape-things App",
        "description": "Debug and fix the 'b' key background toggle functionality in the those-shape-things app, which currently fails to properly switch between black and white backgrounds.",
        "details": "Implement a fix for the black background toggle functionality in the those-shape-things app:\n\n1. Locate the keyboard event handler that processes the 'b' key press:\n   ```javascript\n   function keyPressed() {\n     if (key === 'b' || key === 'B') {\n       toggleBackground();\n     }\n     // other key handlers...\n   }\n   ```\n\n2. Debug the `toggleBackground()` function to identify why the black background is not displaying correctly:\n   - Check if the function exists and is being called when 'b' is pressed\n   - Verify the current implementation of the toggle logic\n   - Look for issues with the background color setting or rendering\n\n3. Implement the fix based on findings. Likely solutions include:\n   ```javascript\n   // Option 1: If the function exists but has a logic error\n   function toggleBackground() {\n     // Fix the existing logic, e.g.:\n     isBlackBackground = !isBlackBackground;\n     backgroundColor = isBlackBackground ? 0 : 255; // Ensure proper color values\n   }\n   \n   // Option 2: If the function is missing or needs to be rewritten\n   function toggleBackground() {\n     if (backgroundColor === 255 || backgroundColor === '#FFFFFF') {\n       backgroundColor = 0; // or '#000000' depending on how colors are handled\n     } else {\n       backgroundColor = 255; // or '#FFFFFF'\n     }\n     redraw(); // Ensure canvas is redrawn with new background\n   }\n   ```\n\n4. Ensure the background color is properly applied in the draw loop:\n   ```javascript\n   function draw() {\n     background(backgroundColor);\n     // rest of drawing code...\n   }\n   ```\n\n5. Add a state variable if one doesn't exist to track the current background state:\n   ```javascript\n   let isBlackBackground = false; // Add to global variables\n   ```\n\n6. Update the help overlay (from Task 11) to ensure it correctly describes the 'b' key functionality.",
        "testStrategy": "1. Launch the those-shape-things app in a browser.\n\n2. Test the basic background toggle functionality:\n   - Press the 'b' key and verify the background changes from white to black\n   - Press the 'b' key again and verify it changes back to white\n   - Repeat several times to ensure consistent toggling\n\n3. Test edge cases:\n   - Rapidly press the 'b' key multiple times to ensure the toggle doesn't break\n   - Test the toggle after generating new shapes to ensure it persists correctly\n   - Test the toggle before any shapes are generated\n\n4. Verify visual appearance:\n   - Ensure shapes are clearly visible against both background colors\n   - Check that the contrast between shapes and background is appropriate in both modes\n\n5. Cross-browser testing:\n   - Test the functionality in Chrome, Firefox, and Safari to ensure consistent behavior\n   - Test on both desktop and mobile devices if applicable\n\n6. Verify the help overlay (if implemented from Task 11) correctly describes the 'b' key functionality.",
        "status": "pending",
        "dependencies": [
          7,
          11
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Add Help Screen to Computational-Collage App",
        "description": "Create a toggleable overlay that displays keyboard controls and composition mode descriptions for the computational-collage app, providing users with an accessible reference for app functionality.",
        "details": "Implement a help screen overlay for the computational-collage app:\n\n1. Create HTML structure for the help overlay:\n   ```html\n   <div id=\"help-overlay\" class=\"help-overlay hidden\">\n     <div class=\"help-content\">\n       <h2>Computational Collage Controls</h2>\n       <ul>\n         <li><strong>0-9</strong>: Switch between composition modes</li>\n         <li><strong>s</strong>: Save current composition</li>\n         <li><strong>g</strong>: Open gallery view</li>\n         <li><strong>b</strong>: Toggle blend mode</li>\n         <li><strong>u</strong>: Upload custom image</li>\n         <li><strong>i</strong>: Toggle parameter panel</li>\n         <li><strong>h/i</strong>: Toggle this help screen</li>\n       </ul>\n       \n       <h3>Composition Modes</h3>\n       <ul>\n         <li><strong>Mode 0</strong>: [Description of mode 0]</li>\n         <li><strong>Mode 1</strong>: [Description of mode 1]</li>\n         <!-- Add descriptions for all available modes -->\n       </ul>\n     </div>\n   </div>\n   ```\n\n2. Add CSS styling for the help overlay:\n   ```css\n   .help-overlay {\n     position: fixed;\n     top: 0;\n     left: 0;\n     width: 100%;\n     height: 100%;\n     background-color: rgba(0, 0, 0, 0.8);\n     z-index: 1000;\n     display: flex;\n     justify-content: center;\n     align-items: center;\n     color: white;\n   }\n   \n   .help-content {\n     max-width: 600px;\n     padding: 20px;\n     background-color: rgba(30, 30, 30, 0.9);\n     border-radius: 8px;\n     max-height: 80vh;\n     overflow-y: auto;\n   }\n   \n   .hidden {\n     display: none;\n   }\n   ```\n\n3. Implement JavaScript functionality to toggle the help overlay:\n   ```javascript\n   function keyPressed() {\n     // Existing key handlers...\n     \n     // Add help toggle functionality\n     if (key === 'h' || key === 'H' || key === 'i' || key === 'I') {\n       toggleHelpOverlay();\n     }\n   }\n   \n   function toggleHelpOverlay() {\n     const helpOverlay = document.getElementById('help-overlay');\n     helpOverlay.classList.toggle('hidden');\n   }\n   ```\n\n4. Ensure the help overlay content accurately describes all available keyboard shortcuts and composition modes in the computational-collage app.\n\n5. Make sure the overlay is responsive and displays correctly on different screen sizes.\n\n6. Add a small help icon in the corner of the UI that users can click to toggle the help overlay as an alternative to keyboard shortcuts.\n\n7. Consider adding a \"Click anywhere to close\" message at the bottom of the help overlay and implement the corresponding functionality:\n   ```javascript\n   document.getElementById('help-overlay').addEventListener('click', function(event) {\n     if (event.target === this) {\n       toggleHelpOverlay();\n     }\n   });\n   ```\n\n8. Review the implementation approach used in Task #11 (duo-chrome help overlay) for consistency across apps.",
        "testStrategy": "1. Verify the help overlay is hidden by default when the app loads:\n   - Launch the computational-collage app\n   - Confirm the help overlay is not visible\n\n2. Test toggling the help overlay using keyboard shortcuts:\n   - Press the 'h' key and verify the help overlay appears\n   - Press the 'h' key again and verify the help overlay disappears\n   - Press the 'i' key and verify the help overlay appears\n   - Press the 'i' key again and verify the help overlay disappears\n\n3. Test the help overlay content:\n   - Verify all keyboard shortcuts are correctly listed\n   - Confirm all composition modes (0-9) are described accurately\n   - Check that the descriptions match the actual functionality of the app\n\n4. Test the help overlay appearance:\n   - Verify the overlay is properly centered and formatted\n   - Check that text is readable with good contrast\n   - Test on different screen sizes to ensure responsive behavior\n\n5. Test clicking functionality:\n   - If implemented, verify clicking the help icon toggles the overlay\n   - If implemented, verify clicking outside the help content area closes the overlay\n\n6. Cross-browser testing:\n   - Test the help overlay in Chrome, Firefox, and Safari\n   - Verify consistent appearance and behavior across browsers\n\n7. Accessibility testing:\n   - Verify the help overlay can be navigated using keyboard\n   - Check that screen readers can properly read the help content\n   - Ensure color contrast meets accessibility standards",
        "status": "pending",
        "dependencies": [
          7,
          11
        ],
        "priority": "medium",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-10-14T18:45:46.945Z",
      "updated": "2025-10-14T21:05:41.006Z",
      "description": "Tasks for master context"
    }
  }
}